package org.mobile.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.mobile.db.MobileSaleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOBILE_SALE_INFO".
*/
public class MobileSaleInfoDao extends AbstractDao<MobileSaleInfo, Long> {

    public static final String TABLENAME = "MOBILE_SALE_INFO";

    /**
     * Properties of entity MobileSaleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BrandNum = new Property(1, String.class, "brandNum", false, "BRAND_NUM");
        public final static Property Model = new Property(2, String.class, "model", false, "MODEL");
        public final static Property BarCode = new Property(3, String.class, "barCode", false, "BAR_CODE");
        public final static Property ModelStorage = new Property(4, String.class, "modelStorage", false, "MODEL_STORAGE");
        public final static Property ObjectId = new Property(5, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
    };


    public MobileSaleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MobileSaleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOBILE_SALE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BRAND_NUM\" TEXT," + // 1: brandNum
                "\"MODEL\" TEXT," + // 2: model
                "\"BAR_CODE\" TEXT," + // 3: barCode
                "\"MODEL_STORAGE\" TEXT," + // 4: modelStorage
                "\"OBJECT_ID\" TEXT," + // 5: objectId
                "\"DATE\" INTEGER);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOBILE_SALE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MobileSaleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String brandNum = entity.getBrandNum();
        if (brandNum != null) {
            stmt.bindString(2, brandNum);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(3, model);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(4, barCode);
        }
 
        String modelStorage = entity.getModelStorage();
        if (modelStorage != null) {
            stmt.bindString(5, modelStorage);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(6, objectId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MobileSaleInfo readEntity(Cursor cursor, int offset) {
        MobileSaleInfo entity = new MobileSaleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // brandNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // model
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // barCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // modelStorage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // objectId
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MobileSaleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBrandNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModelStorage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setObjectId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MobileSaleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MobileSaleInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
